
/*
 * Конфигурация с очередью и статистикой 
 * Основной поток сообщений: 
 *     main-server               - сервер 
 *     -> jsonrpc-queue          - очередь сообщений (jsonrpc-workflow, jsonrpc-workflow-callback)
 *     -> prefixdb-service       - десериализатор и вызов методов 
 *     -> prefixdb               - реализация API, прикладные алгаритмы (prefixdb-workflow)
 * 
 * Поток сообщений от порта cron-скриптов: 
 *     client-server
 *     -> client-queue          (client-workflow)
 *     -> prefixdb-service
 *     -> prefixdb
 * 
 * Поток сообщений от порта для слейва: 
 *     slave-server
 *     -> slave-queue          (slave-workflow)
 *     -> prefixdb-service
 *     -> prefixdb              (prefixdb-workflow)
 *
 * 
 * 
 */
{
  /* Разбирает параметры командной строки и запускает демон. Опций не имеет.*/
  "startup": {},

  /*****************************************************************/
  /* Читает и валидирует файл конфигурации.                        */
  /*****************************************************************/
  "config": {
    "enabled": true,
    /* Разрешить перечитывать конфигурацию по сигналу SIGHUP */
    "reload_sighup": false,
    /* Проверять на изменения конфигурацию и перечитывать ее. 0 - выкл.*/
    "reload_changed_ms": 0
      /* Примечание: Динамическое переконфигурирование работает крайне нестабильно, поэтому использовать в бою нельзя */
  },

  /*****************************************************************/
  /* Ядро WFC. Реализует алгоритмы инициализации и запуска системы */
  /*****************************************************************/
  "core": {
    /* Периодичность выполнения задач ядра (проверка на переинициализации при изменении конфигурации или флаг выхода)*/
    "core_timeout_ms": 1000,
    /* Запуск пользовательских задач в основном потоке демона */
    "idle_timeout_ms": 1000,
    /* Ограничение оперативной памяти */
    "rlimit_as_mb": 0,

    /*Настройка workflow ядра */
    "common-workflow": {
      /* Число рабочих потоков. 0 - в основном потоке демона */
      "threads": 1

      /* Примечание: workflow - это очередь задач и пул потоков, который ее разгребает.
       *             Также поддерживает таймеры и реквестеры. Каждый прикладной объект 
       *             имеет доступ к workflow, если он не указан, то используется этот
       *             workflow ядра. См. также раздел "workflow"
       */
    },
    /* список ядер cpu для потоков WFC (потоки workflow, серверов и клиентов, а также пользовательских зарегистрированных потоков) */
    "sys-cpu": [/*6,7,8,9,11*/],
    /* список ядер cpu для всех остальных потоков */
    "wfc-cpu": [/*10*/]
  },

  /*****************************************************************/
  /* Система логирования                                           */
  /*****************************************************************/
  "logger": {
    /* При отключении модуля логирования сообщения выводятся в clog без форматирования */
    "enabled": true,
    /* Приоритет запуска. Должен быть минимальным в конфигурации, чтобы логирование запускалось раньше всех */
    "startup_priority": -1000,
    /* Аналогично, останов логирования должен происходить в последнюю очередь */
    "shutdown_priority": 1000,
    /* Отображать миллисекунды в логах */
    "resolution":"milliseconds",
    "rotation":10,
    "startup_rotate":true,
    /* Ограничение длинны лог-файла в байтах */
    "size_limit": 1000000,
    /* Путь для файла(ов) логов */
    "path": "/logs/prefixdb.log"
  },

  /*****************************************************************/
  /* Рабочие процессы                                              */
  /*****************************************************************/
  "workflow": [
    {
      /* workflow для собственно компонента prefixdb. Используется в основном для отложенной записи */
      "name": "prefixdb-workflow",
      "enabled": true,
      /* запускаем пораньше, чтобы очередь не разбухала */
      "startup_priority": -900,
      /* и раньше остальных завершаем, чтобы "сбросить" все задачи из очереди, выполнение которых будет тормозить процесс останова */
      "shutdown_priority": -900,
      
      /* Максимальный размер очереди (для jsonrpc в штатном режиме 1-2, разрастание очереди свидетельствует о том, что сервер не справляется) 
       * При запуске возможен кратковременное разрастание когда одновременно приходит множество запросов */
      "maxsize": 100000,
      /* Размер очереди при котором происходить предупреждение в лог */
      "wrnsize": 10,
      /* Периодичность записи предупреждения в лог (пока размер превосходит wrnsize) */
      "control_ms": 1000,
      /* Число рабочих потоков. 0 - в основном потоке демона */
      "threads": 1,
      /* Обрабатывать задачи с задержкой. Например для 50 мс, означает что время ответа на запрос будет не менее 50мс. 
       * Можно открыть отдельный порт для кроновых скриптов и настроить очередь с задержкой, чтобы не сильно "валили" запросами */
      "post_delay_ms": 0,
      /* Ограничение по количеству обрабатываем задач ОДНИМ потоком. */
      "rate_limit": 0,
      /* Список выделенных ядер CPU для потоков этого workflow. Если пуст, то настройки ядра  WFC */
      "cpu": []
    },

    {
      /* workflow для основной jsonrpc очереди входящих запросов  */
      "name": "jsonrpc-workflow",
      "enabled": true,
      "startup_priority": -900,
      "shutdown_priority": -900,
      "maxsize": 100000,
      "wrnsize": 10,
      "control_ms": 1000,

      "threads": 6,
      "post_delay_ms": 0,
      "rate_limit": 0,
      "cpu": []
    },

    {
      /* workflow для основной jsonrpc очереди сериализации и отправки ответов на запросы  */
      "name": "jsonrpc-workflow-callback",
      "enabled": true,
      "startup_priority": -900,
      "shutdown_priority": -900,
      "maxsize": 100000,
      "wrnsize": 10,
      "control_ms": 1000,

      "threads": 2,

      "post_delay_ms": 0,
      "rate_limit": 0,
      "cpu": []
    },

    {
      /* workflow для jsonrpc очереди входящих запросов от cron-скриптов и прочих клиентов которые могут давать 
         большую нагрузку, но не требовательны к времени ответа */
      "name": "client-workflow",
      "enabled": true,
      "startup_priority": -900,
      "shutdown_priority": -900,
      "maxsize": 100000,
      "wrnsize": 1000,
      "control_ms": 1000,

      "threads": 1,
      "post_delay_ms": 0,
      "rate_limit": 0,
      "cpu": []
    },

    {
      /* workflow для jsonrpc очереди входящих запросов от слейвов */      
      "name": "slave-workflow",
      "enabled": true,
      "startup_priority": -900,
      "shutdown_priority": -900,
      "maxsize": 100000,
      "wrnsize": 1000,
      "control_ms": 1000,

      "threads": 1,
      "post_delay_ms": 0,
      "rate_limit": 0,
      "cpu": []
    }
  ],

  /*****************************************************************/
  /* TCP сервер                                                    */
  /*****************************************************************/

  "server-tcp": [

    /* Основной порт*/
    {
      "name": "main-server",
      "enabled": true,
      /* В режиме suspend работает как эхо-сервер */
      "suspend": false,
      /* Порты открываем в последнюю очередь */
      "startup_priority": 1000,
      /* А закрываем в первую, чтобы входящий поток запросов не мешал корректно завершить работу */
      "shutdown_priority": -1000,

      /* Следующий по цепочке компонент сбора io-статистики, для мониторинга входящего трафика */
      "target": "jsonrpc-queue",
      /* Включает поддержку keep-alive */
      "keep_alive": true,
      /* Список выделенных ядер CPU для потоков этого сервера. Если пуст, то настройки ядра WFC */
      "cpu": [],

      /* Количество потоков.
       * В каждом потоке "висит" акцептор и в нем же обрабатываются сокеты, которые принял акцептор.
       * Если используется входящая очередь ( io-queue из пакета wfc_io или jsonrpc-queue из пакета wfc_jsonrpc)
       * то нет смысла запускать большое количество потоков, с парсингом и сборкой по простому разделителю сервер 
       * справляется достаточно эффективно.
       * Если время ответа от прикладной логики стабильно мало (более 100000 запросов в сек. ( или менее 10 мкс) ) 
       * то имеет смысл отключить очереди и увеличить количество потоков сервера. На общее время ответа это не сильно 
       * повлияет, но заметно снизит нагрузку на CPU.
       * Архитектура "один слушатель" + "пул воркеров" не поддерживается, т.к. по производительности и ресурсам 
       * она не превосходит схему сервер+очередь, но имеет те же недостатки варианта сервер без очереди (при тяжелом 
       * запросе остальные сокеты потока вынуждены ждать 
       */
      "threads": 1,
      /*ip адрес или имя хоста*/
      "addr": "0.0.0.0",
      "port": "23500",
      /* Очередь входящих запросов на соединение (linux) */
      "backlog": 1024,
      /* Ограничение на количество одновременных подключений (сервер)*/
      "max_connections": 0,

      /* настройки для коннектов */
      "connection": {
        /* 'Читатель' из сокета */
        "reader": {
          /* разделитель входного потока*/
          "sep": "\r\n",
          /* Буфер для операции чтения. Можно уменьшить, если все запросы короткие, 
           * но нет смысла увеличивать больше 8-32Кб даже для больших запросов или 
           * потока сообщений по одному подключению */
          "bufsize": 4096,
          /* Максимальный размер чанка входящего буфера, после которого происходит разделение на массивы размером не более bufsize */
          "maxbuf": 8192,
          /* Если при разделении, последний буфер меньше minbuf то он сливается с предпоследним, при условии, что не будет превышен maxbuf*/ 
          "minbuf": 0,
          /* Удалять разделитель из сообщения*/
          "trimsep": true
        },
        /* 'Писатель' в сокет */
        "writer": {
          /* Добавляет разделитель в конец сообщения */
          "sep": "\r\n",
          /* Буфер для операции записи. */
          "bufsize": 8192,
          /* Максимальный размер чанка исходящего буфера, после которого происходит разделение на массивы размером не более bufsize */
          "maxbuf": 8192,
          /* Если при разделении, последний буфер меньше minbuf то он сливается с предпоследним, при условии, что не будет превышен maxbuf*/ 
          "minbuf": 0,
          /* Если исходящий буфер пуст, а размер сообщения превышает maxbuf, то делается попытка записать сообщение целиком 
             и только потом остаток сообщения разбивается на чанки размером bufsize. Эффективно работает на сообщениях до 1Мб, если больше
             то эффективнее предварительно разбить на массивы 16-32Кб   */
          "first_as_is": true
        }
      }
    },

    /* Порт для крон-скриптов */
    {
      "name": "client-server",
      "enabled": true,
      "suspend": false,
      "startup_priority": 1000,
      "shutdown_priority": -1000,
      "target": "client-queue",
      "keep_alive": true,
      "cpu": [],
      "threads": 1,
      "addr": "0.0.0.0",
      "port": "23501",
      "backlog": 1024,
      "max_connections": 0,

      "connection": {
        "reader": {
          "sep": "\r\n",
          "bufsize": 4096,
          "maxbuf": 8192,
          "minbuf": 0,
          "trimsep": true
        },
        "writer": {
          "sep": "\r\n",
          "bufsize": 512,
          "maxbuf": 8192,
          "minbuf": 0,
          "first_as_is": true
        }
      }
    },

    /* Порт для слейва */
    {
      "name": "slave-server",
      "enabled": true,
      "suspend": false,
      "startup_priority": 1000,
      "shutdown_priority": -1000,

      "target": "slave-queue",
      "keep_alive": true,
      "cpu": [],
      "threads": 1,
      "addr": "0.0.0.0",
      "port": "23502",
      "backlog": 1024,
      "max_connections": 0,

      "connection": {
        "reader": {
          "sep": "\r\n",
          "bufsize": 4096,
          "maxbuf": 8192,
          "minbuf": 0,
          "trimsep": true
        },
        "writer": {
          "sep": "\r\n",
          "bufsize": 8192,
          "maxbuf": 8192,
          "minbuf": 0,
          "first_as_is": true
        }
      }
    },

    /* raw-порт */
    {
      "name": "raw-server",
      "enabled": true,
      "target": "prefixdb",
      "threads": 0,
      "addr": "0.0.0.0",
      "port": "23503"
    }
  ],


  /*****************************************************************/
  /* Очередь jsonrpc-запросов                                      */
  /*****************************************************************/

  "jsonrpc-queue": [
    /* Основная очередь  */
    {
      "name": "jsonrpc-queue",
      "enabled": true,
      "suspend": false,
      /* Это workflow для входящей очереди */
      "workflow": "jsonrpc-workflow",
      /* И еще раз отправляем на сбор статистики  */
      "target": "prefixdb-service",
      
      /* Можно задать workflow для исходящей очереди. Имеет смысл только при тяжелых ответах на запрос 
         и/или ответ в прикладной области отправляется под мьютексом. В данном случае на время ответа не 
         повлияет но увеличит нагрузку на CPU  */
      "callback_queue": true,
      "callback_workflow": "jsonrpc-workflow-callback"
    },
    /* Очередь для cron скриптов  */
    {
      "name": "client-queue",
      "enabled": true,
      "suspend": false,
      "workflow": "client-workflow",
      "target": "prefixdb-service",
      "callback_queue": false,
      "callback_workflow": ""
    },
    /* Очередь для слейва */
    {
      "name": "slave-queue",
      "enabled": true,
      "suspend": false,
      "workflow": "slave-workflow",
      "target": "prefixdb-service"
    }
  ],

  /*****************************************************************/
  /* Сервис PrefixDB                                               */
  /*****************************************************************/
  "prefixdb-service": [
    /* Десериализует параметры запроса и осуществляет вызов метода прикладного объекта*/
    {
      "name": "prefixdb-service",
      "enabled": true,
      "suspend": false,
      /* Только для сбора статы. Достаточно общего workflow ядра WFC*/
      "workflow": "", 

      /* Прикладной объект*/
      "target": "prefixdb",

      /*  Пропускать не JSON-RPC запросы. Может использоваться если в прикладном объекте реализован 
       *  метод iinterface::perfom_io для произвольных сообщений. Обычно для этого открывают другой 
       *  порт, но если сервер соединен непосредственно с сервисом, то можно по одному порту  */
      "allow_non_jsonrpc": true,

      /* В большинстве случаев не нужно отслеживать подключение/отключение клиентов, а также делать 
       * встречные вызовы (с сервера к клиенту), поэтому отключаем реестр вызовов (автоматически отключается 
       * очередь ожидания ответов на запросы)*/
      "disable_handler_map": false,

      /* Следующие опции работают только при "disable_handler_map": false */
      "call_lifetime_ms": 3000,
      "remove_everytime": true,
      "remove_outdated_ms": 1000
    }
  ],

  /*****************************************************************/
  /* prefixdb                                                      */
  /*****************************************************************/
  "prefixdb": [
    {
      "name": "prefixdb",
      "enabled": true,
      /* В suspend режиме отправляет пустой ответ. Может быть использован для отладки производительности.
       * (Если есть существенная разница в suspend и не-suspend то основные ресурсы уходят на прикладную логику) */
      "suspend": false,
      /* Должен запускаться после клиента мастера, иначе может не подцепиться репликация */
      "startup_priority": 0,
      "shutdown_priority": 0,
      /* Для таймеров слева и очереди отложенной записи */
      "workflow": "prefixdb-workflow",
      /* Сканирует папку о открывает БД префиксов иначе только при первом запросе */
      "preopen": true,
      /* Ограничение на количество ключей в одном запросе */
      "keys_per_req": 100,
      /* Максимальная длина ключа в запросе */
      "key_size_limit": 256,
      /* Максимальный размер значения в запросе */
      "value_size_limit": 10240,
      /*Ограничение на длину имени префикса */
      "prefix_size_limit": 256,
      /* Максимальная длина префикса в запросе */
      "max_prefixes": 128,
      /* Путь к БД префиксов */
      "path": "/monamour/prefixdb/master1",
      /* WAL можно хранить в другом месте ( например SSD ) */
      "wal_path": "",
      /* Путь куда будут перемещаться БД префиксов при вызове detach_prefix */
      "detach_path": "/monamour/prefixdb/master1_detach",
      /* максимальный размер хранимых json-объектов (не реализовано) */
      "packed_limit": 1000,
      /* максимальный размер хранимых json-массивов (не реализовано) */
      "array_limit": 1000,
      /* ограничение на количество возвращаемых ключей для range за один запрос  */
      "range_limit": 10000,
      /* Отложенная запись через очередь. Уменьшается время ответа на модифицирующие запросы 
       * если не нужен результат и не задан параметр sync в запросе. Внимание! Если не задан 
       * sync в запросе, то фактическая запись в базу может быть произведена позже, чем клиент 
       * получит ответ об успешной операции. Если в этот момент демон останавливается, то 
       * все запросы в очереди теряются 
       */
      "enable_delayed_write": true,
      /* Автоматическое восстановление при старте на поврежденной базе */
      "auto_repair": false,
      /* Завершить работу при ошибке открытия БД*/
      "abort_if_open_error": true,
      /* Проверять json в операциях типа package */
      "check_incoming_merge_json": true,
      /* ini-конфиг для RocksDB */
      "ini": "./rocksdb.ini",
      /*"ini": "/usr/monamour/prefixdb/rocksdb.ini",*/

      /* Периодическое переуплотнение БД префиксов (может ускорить работу после удаления массива данных )*/
      "compact": {
        /* Запускать сразу после открытия(работает только с preopen=true и независимо от "enabled")*/
        "startup_compact": false,
        /* Вкл/выкл периодическое переуплотнение (не влияет на startup_compact) 
           Если не заданы start_time и period_s то раз в сутки с момента запуска
          */
        "enabled": false,
        /* Запускать в заданное время, например 03:00:00 */
        "start_time": "",
        /* Если не задано, то раз в сутки. Если не ноль и start_time="" то с заданой периодичностью с 
           момента запуска или начиная со времени start_time */
        "period_s": 0
      },

      /* Опции восстановления по умолчанию. Для запуска восстановления:
         # восстановление с текущего бэкапа в соответствии с настройками 
         ./prefixdb -C conf --instance-options="prefixdb:restore"
         # восстановление с указанного бэкапа 
         ./prefixdb -C conf --instance-options="prefixdb:restore=/monamour2/prefixdb/slave1_backup"
         # восстановление с указанной точки 
         ./prefixdb -C conf --instance-options="prefixdb:pid=3:restore=/monamour2/prefixdb/slave1_backup"
        */
      "restore": {
        /* Запретить восстановление для данной конфигурации */
        "forbid": true,
        /* Точка восстановления по умолчанию */
        "backup_id": 0,
        /* Путь к бэкапу по умолчанию */
        "path": "/monamour/prefixdb/slave1_backup"
      },
      /* Устарело */
      "stop_list": []
    }
  ]
}
